%{
// VSOP Parser(Yacc) (v1.41)
// Shin-ichi MINATO (Dec. 15, 2015)

#define YYMAXDEPTH 1000
#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <string>
#include "CtoI.h"
#include "ZBDDDG.h"
#include "vsop.h"

#ifdef B_64
#  define B_STRTOI strtoll
#  define B_ITOSTR(n, s) sprintf(s, "%lld", n)
#else
#  define B_STRTOI strtol
#  define B_ITOSTR(n, s) sprintf(s, "%d", n)
#endif

using namespace std;

extern	int	yylineno;
extern	char*	yytext;
extern	FILE*	yyin;
extern	int	yywrap();
extern	int	yylex();

extern "C"
{
  extern int system(const char*);
  extern int isatty(int);
  extern void  bddfree(bddword);
}

void yyerror(const char* s)
{
  cerr << s << " in line " << yylineno << ".\n";
  cerr.flush();
}

int yywrap() { return(1); }

#define NDEF 1000000

int VarOrdTop;

int main(int argc, char** argv)
{

  char* src = 0;
  char* opt;
  if(argc == 1) opt = 0;
  else
  {
    opt = argv[1];
    if(opt[0] != '-'){ src = opt; opt = 0; }
    else if(argc > 2) src = argv[2];
  }

  if(src != 0 && (yyin = fopen(src, "r")) == 0)
  {
    fprintf(stderr, "can't open the file: %s\n", src);
    return 1;
  }

  bddword nmax;
  if(opt == 0) nmax = NDEF;
  else nmax = B_STRTOI(opt+1, NULL, 10);

  BDDV_Init(256, nmax);
  VarOrdTop = 0;

  if(src == 0 && isatty(0) == 1)
  {
    cerr << "***** VSOP (Valued Sum-Of-Products) calculator <v1.41> *****\n" << PROMPT; 
    cerr.flush();
  }

  yyparse();
  exit(0);
}

struct OV
{
  char _ovf;

  OV(void) { _ovf = 0; }
  void Set(void) { _ovf = 1; }
  char Check(void)
  {
    char a = _ovf;
    _ovf = 0;
    return a;
  }
} OVF;

static const int power16 = 1 << 16;
static const char BC_VSOP_VALUE = 50;
static const char BC_VSOP_DENSITY = 51;
static const char BC_VSOP_MAXCOST = 52;
static const char BC_VSOP_MINCOST = 53;
static const char BC_VSOP_PRODUCT = 54;

static CtoI Product(CtoI, CtoI);
CtoI Product(CtoI ac, CtoI bc)
{
  if(ac == 1) return bc;
  if(bc == 1) return ac;
  if(ac == CtoI_Null()) return ac;
  if(bc == CtoI_Null()) return bc;
  if(ac == 0) return 0;
  if(bc == 0) return 0;

  CtoI a = ac; CtoI b = bc;
  int atop = a.Top();
  int btop = b.Top();
  if(BDD_LevOfVar(atop) < BDD_LevOfVar(btop))
  {
    a = bc; b = ac;
    atop = a.Top(); btop = b.Top();
  }

  bddword ax = a.GetZBDD().GetID();
  bddword bx = b.GetZBDD().GetID();
  if(atop == btop && ax < bx)
  {
    a = bc; b = ac;
    ax = a.GetZBDD().GetID();
    bx = b.GetZBDD().GetID();
  }

  ZBDD z = BDD_CacheZBDD(BC_VSOP_PRODUCT, ax, bx);
  if(z != -1) return CtoI(z);
  BDD_RECUR_INC;

  CtoI a0 = a.Factor0(atop);
  CtoI a1 = a.Factor1(atop);
  CtoI c;
  if(atop != btop)
  {
    if(atop > BDDV_SysVarTop)
    {
      int azvar = VTable.GetGID(atop);
      CtoI bz = b;
      int bztop = bz.Top();
      while(BDD_LevOfVar(azvar) <= BDD_LevOfVar(bztop))
      {
        bz = bz.Factor0(bztop);
	bztop = bz.Top();
      }
      c = CtoI_Union(Product(a0, b), Product(a1, bz).AffixVar(atop));
    }
    else c = Product(a0, b) + Product(a1, b).TimesSysVar(atop);
  }
  else
  {
    CtoI b0 = b.Factor0(atop);
    CtoI b1 = b.Factor1(atop);
    if(atop > BDDV_SysVarTop)
    {
      int azvar = VTable.GetGID(atop);
      CtoI az = a;
      int aztop = az.Top();
      while(BDD_LevOfVar(azvar) <= BDD_LevOfVar(aztop))
      {
        az = az.Factor0(aztop);
	aztop = az.Top();
      }
      CtoI bz = b;
      int bztop = bz.Top();
      while(BDD_LevOfVar(azvar) <= BDD_LevOfVar(bztop))
      {
        bz = bz.Factor0(bztop);
	bztop = bz.Top();
      }
      c = CtoI_Union(Product(a0, b0),
          (Product(a1,bz)+Product(az,b1)+Product(a1,b1)).AffixVar(atop));
    }
    else if(atop > 1)
      c = Product(a0,b0) + (Product(a1,b0)+Product(a0,b1)).TimesSysVar(atop)
        + Product(a1,b1).TimesSysVar(atop - 1);
    else BDDerr("CtoI::operator*(): SysVar overflow.");
  }

  BDD_RECUR_DEC;
  BDD_CacheEnt(BC_VSOP_PRODUCT, ax, bx, c.GetZBDD().GetID());
  return c;
}

static int Value(CtoI);
int Value(CtoI a)
{
  if(a == CtoI()) return 0;
  if(a == 0) return 0;
  if(a == 1) return power16;

  int val = BDD_CacheInt(BC_VSOP_VALUE, a.GetZBDD().GetID(), 0);
  if(val <= BDD_MaxNode) return val;
  BDD_RECUR_INC;

  int var = a.Top();
  float f;
  if(var > BDDV_SysVarTop)
    f = (float)VTable.GetValue(var) / power16;
  else
  {
    f = -2;
    for(int i=0; i<(BDDV_SysVarTop-var); i++) f *= f;
  }
  int val1 = Value(a.Factor1(var));
  val = (int)(f * val1);
  if(val)
  {
    if((val1<0)^(f<0)^(val<0)) OVF.Set();
  }
  else if((f!=0) && val1) OVF.Set();
  int val0 = Value(a.Factor0(var));
  val1 = val;
  val += val0; 
  if(val1>0 && val0>0 && val<0) OVF.Set();
  if(val1<0 && val0<0 && val>0) OVF.Set();

  BDD_RECUR_DEC;
  BDD_CacheEnt(BC_VSOP_VALUE, a.GetZBDD().GetID(), 0, val);
  return val;
}

static const int power30 = 1 << 30;

static int Density(ZBDD, int);
int Density(ZBDD f, int tlev)
{
  if(f == -1) return 0;
  if(f == 0) return 0;

  int var = f.Top();
  int lev = BDD_LevOfVar(var);
  int c;
  if(f == 1) c = power30;
  else
  {
    c = BDD_CacheInt(BC_VSOP_DENSITY, f.GetID(), 0);
    if(c > BDD_MaxNode)
    {
      BDD_RECUR_INC;
      c = (Density(f.OffSet(var), lev-1) >> 1)
        + (Density(f.OnSet0(var), lev-1) >> 1);
      BDD_RECUR_DEC;
      BDD_CacheEnt(BC_VSOP_DENSITY, f.GetID(), 0, c);
    }
  }
  for(int i=1; i<=tlev-lev; i++) c >>= 1;
  return c;
}

static int MaxCost(ZBDD);
int MaxCost(ZBDD f)
{
  if(f == -1) return 0;
  if(f == 0) return -power30;
  if(f == 1) return 0;

  int c = BDD_CacheInt(BC_VSOP_MAXCOST, f.GetID(), 0);
  if(c <= BDD_MaxNode) return c;
  BDD_RECUR_INC;

  int var = f.Top();
  int c0 = MaxCost(f.OffSet(var));
  int c1 = MaxCost(f.OnSet0(var)) + VTable.GetValue(var);
  c = (c0 > c1)? c0: c1;

  BDD_RECUR_DEC;
  BDD_CacheEnt(BC_VSOP_MAXCOST, f.GetID(), 0, c);
  return c;
}

static int MinCost(ZBDD);
int MinCost(ZBDD f)
{
  if(f == -1) return 0;
  if(f == 0) return power30;
  if(f == 1) return 0;

  int c = BDD_CacheInt(BC_VSOP_MINCOST, f.GetID(), 0);
  if(c <= BDD_MaxNode) return c;
  BDD_RECUR_INC;

  int var = f.Top();
  int c0 = MinCost(f.OffSet(var));
  int c1 = MinCost(f.OnSet0(var)) + VTable.GetValue(var);
  c = (c0 > c1)? c1: c0;

  BDD_RECUR_DEC;
  BDD_CacheEnt(BC_VSOP_MINCOST, f.GetID(), 0, c);
  return c;
}

int CurGID;
char AutoExportID = 0;
std::vector<std::string> AutoExportPaths;

%}
%union
{
  struct
  {
    char* str;
    int len;
  } name;
  CtoI* ctoi;
  int num;
}

%right QUESTION COLON
%left EQ NE
%left GT GE LT LE
%left PLUS MINUS
%left MEET
%right UMINUS UPLUS
%left MULTIPLY QUOTIENT REMAINDER
%left CAT
%left LBRACKET
%right PERIOD
%right MAXVAL MINVAL TOTALVAL RESTRICT PERMIT PERMITSYM ITEMS ALWAYS
%right TEQ TNE TGT TGE TLT TLE FPA FPAV FPM FPC SYMGRP
%left LPAREN IDFUNC IDVAR NUMBER

%start vsop

%token	SEMICOLON RETURN SYMBOL PRINT EXIT HELP
%token  TEQ TNE TGT TGE TLT TLE 
%token  FPA FPAV FPM FPC SYMGRP IMPORT LCM //LCMA LCMC LCMM
%token	MAXVAL MINVAL TOTALVAL RESTRICT PERMIT PERMITSYM ITEMS ALWAYS
%token	QUESTION COMMA PERIOD ASSIGN
%token  PLUS MINUS MULTIPLY QUOTIENT REMAINDER MEET
%token  EQ NE GT GE LT LE
%token  COLON LPAREN RPAREN LBRACKET RBRACKET
%token  UNKNOWN
%token AUTOEXPORT
%token<name> IDVAR IDFUNC FNAME NUMBER RNUM

%type<ctoi> expr u_expr
%type<num> value valnum
%%

vsop
  : lines last
    { if(yyin == stdin) cerr << "\n"; return(1); }
  ;

last
  : EXIT RETURN
  | /* empty */
  ;

lines
  : lines commands RETURN
    {
      if(yyin == stdin && isatty(0) == 1)
        cerr << PROMPT;
        cerr.flush();
    }
  | lines error RETURN
    {
      yyerrok;
      if(yyin == stdin && isatty(0) == 1)
      {
        cerr << PROMPT;
        cerr.flush();
      }
    }
  | /* empty */
  ;

commands
  : commands SEMICOLON command
  | command
  ;

command
  : /* empty */
  | define
  | assign
  | output
  | autoexport
  | help
    {
      system(DOCUMENT);
    }
  ;
	
define
  : SYMBOL symlist
  | SYMBOL
    {
      int n = VTable.Used();
      int gid0 = 0;
      for(int i=n; i>0; i--)
      {
	int var = BDD_VarOfLev(i);
	int gid = VTable.GetGID(var);
	if(gid0 != gid && var != gid)
	{
          bout << "[";
	}
        bout << VTable.GetName(var);
	if(gid0 == gid && var == gid)
        bout << "]";
	gid0 = gid;
        bout.Delimit();
      }
      bout.Return();
    }
  | SYMBOL QUOTIENT IDVAR
    {
      if(strcmp($3.str, "v") == 0)
      {
        int n = VTable.Used();
        int gid0 = 0;
        for(int i=n; i>0; i--)
        {
	  int var = BDD_VarOfLev(i);
	  int gid = VTable.GetGID(var);
	  if(gid0 != gid && var != gid)
	  {
            bout << "[";
	  }
          bout << VTable.GetName(var) << "(";
          char s[32];
          sprintf(s, "%g", (float)VTable.GetValue(var)/power16);
          bout << s << ")";
	  if(gid0 == gid && var == gid)
          bout << "]";
	  gid0 = gid;
          bout.Delimit();
        }
        bout.Return();
      }
      else if(strcmp($3.str, "t") == 0)
      {
        VarOrdTop = 1;
	cerr << "(a new symbol will be added at the top.)" << "\n";
      }
      else if(strcmp($3.str, "b") == 0)
      {
        VarOrdTop = 0;
	cerr << "(a new symbol will be added at the bottom.)" << "\n";
      }
      else
      {
        yyerror("Illegal switch");
      }
      delete[] $3.str;
    }
  ;

symlist
  : symlist comma { CurGID = 0; } symatom
  | { CurGID = 0; } symatom
  ;

symatom
  : LBRACKET
    gsymlist RBRACKET
  | symbol
  ;

gsymlist
  : gsymlist comma symbol
  | symbol
  ;

symbol
  : IDVAR
    {
      int id = VTable.GetID($1.str);
      if(id != 0)
      {
	char s[256];
        sprintf(s, "<WARNING> Duplicated symbol '%s' declared", $1.str);
        yyerror(s);
      }
      else
      {
        if(CurGID == 0)
        {
	  if(VarOrdTop) VTable.SetT($1.str, power16 >> 1);
	  else VTable.SetB($1.str, power16 >> 1);
	  CurGID = VTable.GetID($1.str);
        }
        else
	{
	  if(VarOrdTop) VTable.SetT($1.str, power16 >> 1, CurGID);
	  else
	  {
	    int gid = CurGID;
	    VTable.SetB($1.str, power16 >> 1);
	    CurGID = VTable.GetID($1.str);
	    int n = VTable.Used();
	    for(int i=2; i<=n; i++)
	    {
	      if(VTable.GetGID(BDD_VarOfLev(i)) != gid) break;
	      char *name = VTable.GetName(BDD_VarOfLev(i));
	      int val = VTable.GetValue(BDD_VarOfLev(i));
	      VTable.SetB(name, val, CurGID);
	    }
	  }
	}
      }
      delete[] $1.str;
    }
  | IDVAR LPAREN value RPAREN
    {
      int id = VTable.GetID($1.str);
      if(id != 0)
      {
	char s[256];
        sprintf(s, "<WARNING> Duplicated symbol '%s' declared", $1.str);
        yyerror(s);
      }
      else
      {
        if(CurGID == 0)
        {
	  if(VarOrdTop) VTable.SetT($1.str, $3);
	  else VTable.SetB($1.str, $3);
	  CurGID = VTable.GetID($1.str);
        }
        else
	{
	  if(VarOrdTop) VTable.SetT($1.str, $3, CurGID);
	  else
	  {
	    int gid = CurGID;
	    VTable.SetB($1.str, $3);
	    CurGID = VTable.GetID($1.str);
	    int n = VTable.Used();
	    for(int i=2; i<=n; i++)
	    {
	      if(VTable.GetGID(BDD_VarOfLev(i)) != gid) break;
	      char *name = VTable.GetName(BDD_VarOfLev(i));
	      int val = VTable.GetValue(BDD_VarOfLev(i));
	      VTable.SetB(name, val, CurGID);
	    }
	  }
	}
      }
      delete[] $1.str;
    }
  ;

value
  : valnum
    { $$ = $1; }
  | MINUS valnum
    { $$ = - $2; }
  ;

valnum
  : NUMBER
    {
      $$ = atoi($1.str) * power16;
      delete[] $1.str;
    }
  | RNUM
    {
      $$ = (int)(atof($1.str) * power16);
      delete[] $1.str;
    }
  ;

comma
  : COMMA
  | /* empty */
  ;

assign
  : IDFUNC ASSIGN expr
    {
      if(*$3 == CtoI_Null())
      {
        *$3 = 0;
        yyerror("<WARNING> Memory overflow");
      }
      FTable.Set($1.str, *$3);

      // autowatch 
      char autoexportid = FTable.GetAutoExportID($1.str);
      if (autoexportid >= 0) 
      {
	  string exportfilename = AutoExportPaths[autoexportid];
	  FILE *fp;
	  fp = fopen(exportfilename.c_str(), "w");
	  int n = VTable.Used();
	  for(int i=n; i>0; i--)
	  {
	      int var = BDD_VarOfLev(i);
	      fprintf(fp, "%s ", VTable.GetName(var));
	  }
	  fprintf(fp, "\n");
	  CtoI f = FTable.GetCtoI($1.str);
	  int d = f.TopDigit();
	  ZBDDV v = ZBDDV();
	  for(int i=0; i<=d; i++)
	      v += ZBDDV(f.Digit(i).GetZBDD(), i);
	  v.Export(fp);
	  fclose(fp);
      }
      delete[] $1.str;
      delete $3;
    }
  ;

u_expr
  : LPAREN expr RPAREN
    { $$ = $2;}
  | IDFUNC
    {
      CtoI f = FTable.GetCtoI($1.str);
      if(f == CtoI_Null())
      {
        yyerror("<WARNING> Undefined variable appeared");
        f = 0;
        FTable.Set($1.str, f);
      }
      $$ = new CtoI(f);
      delete[] $1.str;
    }
  | IDVAR
    {
      int var  = VTable.GetID($1.str);
      if(var == 0)
      {
	if(VarOrdTop)
	{
	  VTable.SetT($1.str, power16/2);
	  char s[256];
          sprintf(s, "<WARNING> Undeclared symbol '%s' added at the top", $1.str);
          yyerror(s);
	}
	else
	{
	  VTable.SetB($1.str, power16/2);
	  char s[256];
          sprintf(s, "<WARNING> Undeclared symbol '%s' added at the bottom", $1.str);
          yyerror(s);
	}
        var  = VTable.GetID($1.str);
      }
      CtoI a = CtoI(1).AffixVar(var);
      $$ = new CtoI(a);
      delete[] $1.str;
    }
  | NUMBER
    {
      $$ = new CtoI(CtoI_atoi($1.str));
      delete[] $1.str;
    }
  | u_expr MAXVAL
    {
      *$1 = $1 -> MaxVal();
      $$ = $1;
    }
  | u_expr MINVAL
    {
      *$1 = $1 -> MinVal();
      $$ = $1;
    }
  | u_expr TOTALVAL
    {
      *$1 = $1 -> TotalVal();
      $$ = $1;
    }
  | u_expr RESTRICT LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterRestrict(*$4);
      $$ = $1;
      delete $4;
    }
  | u_expr PERMIT LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterPermit(*$4);
      $$ = $1;
      delete $4;
    }
  | u_expr PERMITSYM LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterPermitSym($4->GetInt());
      $$ = $1;
      delete $4;
    }
  | u_expr ITEMS
    {
      *$1 = $1 -> TotalValItems();
      $$ = $1;
    }
  | u_expr ALWAYS
    {
      *$1 = $1 -> NonZero().GetZBDD().Always();
      $$ = $1;
    }
  | u_expr TEQ LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> EQ_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr TNE LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> NE_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr TGT LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> GT_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr TGE LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> GE_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr TLT LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> LT_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr TLE LPAREN expr RPAREN
    {
      *$1 = $1 -> FilterThen($1 -> LE_Const($4->GetInt()));
      $$ = $1;
      delete $4;
    }
  | u_expr FPA LPAREN expr RPAREN
    {
      *$1 = $1 -> FreqPatA($4->GetInt() );
      //*$1 = $1 -> ReduceItems($1->TotalValItems().GE_Const(*$4)).FreqPatA($4->GetInt());
      $$ = $1;
      delete $4;
    }
  | u_expr FPAV LPAREN expr RPAREN
    {
      *$1 = $1 -> FreqPatAV($4->GetInt() );
      $$ = $1;
      delete $4;
    }
  | u_expr FPM LPAREN expr RPAREN
    {
      *$1 = $1 -> FreqPatM($4->GetInt() );
      $$ = $1;
      delete $4;
    }
  | u_expr FPC LPAREN expr RPAREN
    {
      *$1 = $1 -> FreqPatC($4->GetInt() );
      $$ = $1;
      delete $4;
    }
  | u_expr SYMGRP
    {
      *$1 = $1 -> NonZero().GetZBDD().SymGrp();
      $$ = $1;
    }
  ;

expr
  : u_expr
    { $$ = $1; }
  | IMPORT LPAREN FNAME RPAREN
    {
      $3.str[$3.len - 1] = 0;
      FILE *fp;
      fp = fopen($3.str+1, "r");
      if(fp == NULL)
      {
        yyerror("Can't open the file");
	$$ = new CtoI(0);
      }
      else
      {
	ZBDDV v = ZBDDV_Import(fp);
	fclose(fp);
	if(v != ZBDDV(-1))
	{
	  int t = 1;
	  char s[32];
	  while(BDD_LevOfVar(v.Top()) > VTable.Used())
	  {
	    sprintf(s, "x%d", t);
	    while(VTable.GetID(s) != 0)
	    {
	      t++;
	      sprintf(s, "x%d", t);
	    }
	    VTable.SetT0(BDD_VarOfLev(t), s);
	  }
	  int len = v.Last()+1;
	  CtoI a = CtoI(0);
	  for(int i=0; i<len; i++)
	    a += CtoI(v.GetZBDD(i)).ShiftDigit(i);
          $$ = new CtoI(a);
	}
	else
	{
          yyerror("<WARNING> import error");
	  $$ = new CtoI(0);
	}
      }
      delete[] $3.str;
    }
  | LCM LPAREN FNAME FNAME NUMBER RPAREN
    {
      $3.str[$3.len - 1] = 0;
      $4.str[$4.len - 1] = 0;
      int th = atoi($5.str);
      if(strcmp($3.str+1, "F") == 0) CtoI_Lcm1($4.str+1, 0, th, 0);
      else if(strcmp($3.str+1, "C") == 0) CtoI_Lcm1($4.str+1, 0, th, 1);
      else if(strcmp($3.str+1, "M") == 0) CtoI_Lcm1($4.str+1, 0, th, 2);
      else if(strcmp($3.str+1, "FQ") == 0) CtoI_Lcm1($4.str+1, 0, th, 10);
      else if(strcmp($3.str+1, "CQ") == 0) CtoI_Lcm1($4.str+1, 0, th, 11);
      else if(strcmp($3.str+1, "MQ") == 0) CtoI_Lcm1($4.str+1, 0, th, 12);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", i+1);
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
      delete[] $5.str;
    }
  | LCM LPAREN FNAME FNAME NUMBER FNAME RPAREN
    {
      $3.str[$3.len - 1] = 0;
      $4.str[$4.len - 1] = 0;
      int th = atoi($5.str);
      $6.str[$6.len - 1] = 0;
      if(strcmp($3.str+1, "F") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 0);
      else if(strcmp($3.str+1, "C") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 1);
      else if(strcmp($3.str+1, "M") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 2);
      else if(strcmp($3.str+1, "FQ") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 10);
      else if(strcmp($3.str+1, "CQ") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 11);
      else if(strcmp($3.str+1, "MQ") == 0) CtoI_Lcm1($4.str+1, $6.str+1, th, 12);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", i+1);
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
      delete[] $5.str;
      delete[] $6.str;
    }
/*
  | LCMA LPAREN FNAME NUMBER RPAREN
    {
      $3.str[$3.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, 0, th, 10);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
    }
  | LCMC LPAREN FNAME NUMBER RPAREN
    {
      $3.str[$3.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, 0, th, 1);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
    }
  | LCMM LPAREN FNAME NUMBER RPAREN
    {
      $3.str[$3.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, 0, th, 2);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
    }
  | LCMA LPAREN FNAME NUMBER FNAME RPAREN
    {
      $3.str[$3.len - 1] = 0;
      $5.str[$5.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, $5.str+1, th, 0);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
      delete[] $5.str;
    }
  | LCMC LPAREN FNAME NUMBER FNAME RPAREN
    {
      $3.str[$3.len - 1] = 0;
      $5.str[$5.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, $5.str+1, th, 1);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
      delete[] $5.str;
    }
  | LCMM LPAREN FNAME NUMBER FNAME RPAREN
    {
      $3.str[$3.len - 1] = 0;
      $5.str[$5.len - 1] = 0;
      int th = atoi($4.str);
      CtoI_Lcm1($3.str+1, $5.str+1, th, 2);
      for(int i=VTable.Used(); i<CtoI_LcmItems(); i++)
      {
	int t = 1;
	char s[32];
	int x = CtoI_LcmPerm(i);
	sprintf(s, "x%d", x);
	while(VTable.GetID(s) != 0)
	{
	  t++;
	  sprintf(s, "x%d_%d", x, t);
	}
	VTable.SetT(s, power16/2);
      }
      CtoI a = CtoI_Lcm2();
      $$ = new CtoI(a);
      delete[] $3.str;
      delete[] $4.str;
      delete[] $5.str;
    }
*/
  | MINUS expr %prec UMINUS
    {
      *$2 = - *$2;
      $$ = $2;
    }
  | PLUS expr %prec UPLUS
    {
      $$ = $2;
    }
  | expr u_expr %prec CAT
    {
      *$1 = Product(*$1, *$2);
      $$ = $1;
      delete $2;
    }
  | expr PLUS expr
    {
      *$1 = *$1 + *$3;
      $$ = $1;
      delete $3;
    }
  | expr MINUS expr
    {
      *$1 = *$1 - *$3;
      $$ = $1;
      delete $3;
    }
  | expr MEET expr
    {
      *$1 = CtoI_Meet(*$1, *$3);
      //*$1 = ZBDD_Meet($1->NonZero().GetZBDD(), $3->NonZero().GetZBDD());
      $$ = $1;
      delete $3;
    }
  | expr EQ expr
    {
      *$1 = CtoI_EQ(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr NE expr
    {
      *$1 = CtoI_NE(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr GT expr
    {
      *$1 = CtoI_GT(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr GE expr
    {
      *$1 = CtoI_GE(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr LT expr
    {
      *$1 = CtoI_LT(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr LE expr
    {
      *$1 = CtoI_LE(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr QUESTION expr COLON expr
    {
      *$1 = CtoI_ITE(*$1, *$3, *$5);
      $$ = $1;
      delete $3;
      delete $5;
    }
  | expr MULTIPLY expr
    {
      *$1 = Product(*$1, *$3);
      $$ = $1;
      delete $3;
    }
  | expr QUOTIENT expr
    {
      if(*$3 == 0)
      {
        yyerror("<WARNING> Divide by zero");
        *$1 = 0;
      }
      else *$1 = *$1 / *$3;
      $$ = $1;
      delete $3;
    }
  | expr REMAINDER expr
    {
      if(*$3 == 0)
      {
        yyerror("<WARNING> Divide by zero");
        *$1 = 0;
      }
      else *$1 = *$1 % *$3;
      $$ = $1;
      delete $3;
    }
  ;

output
  : print expr
    {
      if(*$2 == CtoI_Null())
      {
        *$2 = 0;
        yyerror("<WARNING> Memory overflow");
      }
      if(PrintCtoI(*$2) == 1)
        yyerror("<WARNING> Memory overflow");
      delete $2;
    }
  | print QUOTIENT IDVAR expr
    {
      if(*$4 == CtoI_Null())
      {
        *$4 = 0;
        yyerror("<WARNING> Memory overflow");
      }
      else if(strcmp($3.str, "hex") == 0)
      {
        if(PrintCtoI_16(*$4) == 1)
          yyerror("<WARNING> Memory overflow");
	delete $4;
      }
      else if(strcmp($3.str, "bit") == 0)
      {
        if(PrintDigital(*$4) == 1)
          yyerror("<WARNING> Memory overflow");
	delete $4;
      }
      else if(strcmp($3.str, "case") == 0)
      {
        if(PrintCase(*$4) == 1)
          yyerror("<WARNING> Memory overflow");
	delete $4;
      }
      else if(strcmp($3.str, "map") == 0)
      {
        if(MapAll(*$4) == 1)
          yyerror("<WARNING> Memory overflow");
	delete $4;
      }
      else if(strcmp($3.str, "rmap") == 0)
      {
        if(MapSel(*$4) == 1)
          yyerror("<WARNING> Memory overflow");
	delete $4;
      }
      else if(strcmp($3.str, "size") == 0)
      {
        char s[32];
	B_ITOSTR($4 -> Size(), s);
        bout << "   " << s;
        bout.Delimit();
        BDD_GC();
	B_ITOSTR(BDD_Used(), s);
	bout << "(" << s << ")";
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "count") == 0)
      {
	*$4 = $4 -> CountTerms();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }

	int slen = $4->TopDigit() / 3 + 14;
        char* s = new char[slen];
        if(s == 0)
        {
          yyerror("<WARNING> Memory overflow");
        }

        $4 -> StrNum10(s);
        bout << "   " << s;
        bout.Return();
        delete[] s;
        delete $4;
      }
      else if(strcmp($3.str, "density") == 0)
      {
	*$4 = $4 -> NonZero();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }

        char s[32];
	int d = Density($4 -> GetZBDD(), VTable.Used());
        sprintf(s, "%g", (float)d / power30);
	if(d == 0 && *$4 != 0)
	  yyerror("<WARNING> Bit underflow occurred");
        bout << "   " << s;
        bout.Return();

        delete $4;
      }
      else if(strcmp($3.str, "value") == 0)
      {
        char s[32];
        sprintf(s, "   %g", (float)Value(*$4)/power16);
	if(OVF.Check()!= 0)
	  yyerror("<WARNING> Bit overflow occurred");
        bout << s;
        bout.Return();
        delete $4;
      }
      else if(strcmp($3.str, "maxcover") == 0)
      {
	*$4 = $4 -> NonZero();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }
	if(*$4 == 0) bout << "  0";
	else
	{
	  ZBDD f = $4 -> GetZBDD();
	  if(MaxCost(f)==0)
	    bout << "  1";
	  else
	  {
	    bout << "<Items>: ";
	    while(1)
	    {
	      int var = f.Top();
	      if(var == 0) break;
	      ZBDD f0 = f.OffSet(var);
	      ZBDD f1 = f.OnSet0(var);
	      int c1 = MaxCost(f1) + VTable.GetValue(var);
	      if(MaxCost(f0) < c1)
	      {
	        bout << VTable.GetName(var);
		bout.Delimit();
		f = f1;
	      }
	      else f = f0;
	    }
	  }
	}
        bout.Return();
        delete $4;
      }
      else if(strcmp($3.str, "maxcost") == 0)
      {
	*$4 = $4 -> NonZero();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }
	if(*$4 == 0) bout << "<No cover.>";
	else
	{
          char s[32];
	  int c = MaxCost($4 -> GetZBDD());
          sprintf(s, "%g", (float)c / power16);
          bout << s;
	}
        bout.Return();
        delete $4;
      }
      else if(strcmp($3.str, "mincover") == 0)
      {
	*$4 = $4 -> NonZero();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }
	if(*$4 == 0) bout << "  0";
	else
	{
	  ZBDD f = $4 -> GetZBDD();
	  if(MinCost(f)==0)
	    bout << "  1";
	  else
	  {
	    bout << "<Items>: ";
	    while(1)
	    {
	      int var = f.Top();
	      if(var == 0) break;
	      ZBDD f0 = f.OffSet(var);
	      ZBDD f1 = f.OnSet0(var);
	      int c1 = MinCost(f1) + VTable.GetValue(var);
	      if(MinCost(f0) > c1)
	      {
	        bout << VTable.GetName(var);
		bout.Delimit();
		f = f1;
	      }
	      else f = f0;
	    }
	  }
	}
        bout.Return();
        delete $4;
      }
      else if(strcmp($3.str, "mincost") == 0)
      {
	*$4 = $4 -> NonZero();
        if(*$4 == CtoI_Null())
        {
          *$4 = 0;
          yyerror("<WARNING> Memory overflow");
        }
	if(*$4 == 0) bout << "<No cover.>";
	else
	{
          char s[32];
	  int c = MinCost($4 -> GetZBDD());
          sprintf(s, "%g", (float)c / power16);
          bout << s;
	}
        bout.Return();
        delete $4;
      }
      else if(strcmp($3.str, "plot") == 0)
      {
#ifdef B_STATIC
	bout << "sorry, not supported in this version.";
	bout.Return();
#else
        $4 -> XPrint();
#endif
        delete $4;
      }
      else if(strcmp($3.str, "decomp") == 0)
      {
        if(PrintDecomp(*$4) == 1)
	{
	  bout << "...";
	  bout.Return();
          yyerror("<WARNING> Memory overflow");
	}
	delete $4;
      }
      else if(strcmp($3.str, "decompd") == 0)
      {
        if(PrintDecompDot(*$4) == 1)
	{
	  bout << "...";
	  bout.Return();
          yyerror("<WARNING> Memory overflow");
	}
	delete $4;
      }
      else if(strcmp($3.str, "imply0") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.Support();
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    if(t != t2)
	    {
	      int y = f.ImplyChk(t, t2);
	      if(y == 1)
	      {
	        bout << VTable.GetName(t);
		bout << "->";
	        bout << VTable.GetName(t2);
		bout << ";";
		bout.Delimit();
	      }
	    }
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "symmetry") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.SymSet(t);
	  g -= g2;
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    bout << VTable.GetName(t);
            bout << "==";
	    bout << VTable.GetName(t2);
	    bout << ";";
	    bout.Delimit();
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "imply") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.ImplySet(t);
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    bout << VTable.GetName(t);
            bout << "->";
	    bout << VTable.GetName(t2);
	    bout << ";";
	    bout.Delimit();
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "coimply0") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.Support();
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    if(t != t2)
	    {
	      int y = f.CoImplyChk(t, t2);
	      if(y == 1)
	      {
	        bout << VTable.GetName(t);
		bout << "->";
	        bout << VTable.GetName(t2);
		bout << ";";
		bout.Delimit();
	      }
	    }
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "coimply") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.CoImplySet(t);
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    bout << VTable.GetName(t);
            bout << "->";
	    bout << VTable.GetName(t2);
	    bout << ";";
	    bout.Delimit();
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "coimply2") == 0)
      {
        ZBDD f = $4 -> NonZero().GetZBDD();
	ZBDD g = f.Support();
	while(g != 0)
	{
	  int t = g.Top();
	  g = g.OffSet(t);
	  ZBDD g2 = f.CoImplySet(t) - f.ImplySet(t);
	  while(g2 != 0)
	  {
	    int t2 = g2.Top();
	    g2 = g2.OffSet(t2);
	    bout << VTable.GetName(t);
            bout << "->";
	    bout << VTable.GetName(t2);
	    bout << ";";
	    bout.Delimit();
	  }
	}
	bout.Return();
	delete $4;
      }
      else if(strcmp($3.str, "export") == 0)
      {
	int d = $4 -> TopDigit();
	ZBDDV v = ZBDDV();
	for(int i=0; i<=d; i++)
	  v += ZBDDV($4 -> Digit(i).GetZBDD(), i);
        v.Export();
	delete $4;
      }
      else if(strcmp($3.str, "exports") == 0)
      {
	  int n = VTable.Used();
	  for(int i=n; i>0; i--)
	  {
	      int var = BDD_VarOfLev(i);
	      cout << VTable.GetName(var) << " ";
	  }
	  cout << "\n";
	  int d = $4 -> TopDigit();
	  ZBDDV v = ZBDDV();
	  for(int i=0; i<=d; i++)
	      v += ZBDDV($4 -> Digit(i).GetZBDD(), i);
	  v.Export();
	  delete $4;
    }
      else
      {
        yyerror("Illegal switch");
        delete $4;
      }
      delete[] $3.str;
    }
  | print QUOTIENT IDVAR FNAME expr
    {
      if(strcmp($3.str, "export") == 0)
      {
        $4.str[$4.len - 1] = 0;
	FILE *fp;
	fp = fopen($4.str+1, "w");
	if(fp == NULL) yyerror("Can't open the file");
	else
	{
	  int d = $5 -> TopDigit();
	  ZBDDV v = ZBDDV();
	  for(int i=0; i<=d; i++)
	    v += ZBDDV($5 -> Digit(i).GetZBDD(), i);
          v.Export(fp);
	  fclose(fp);
	}
      }
      else
      {
        yyerror("Illegal switch");
      }
      delete[] $3.str;
      delete[] $4.str;
      delete $5;
    }
    ;
  | print FNAME
    {
      $2.str[$2.len - 1] = 0;
      cout << $2.str+1 << "\n";
      delete[] $2.str;
    }
  ;

print
  : PRINT
  | QUESTION
  ;

autoexport
  :  AUTOEXPORT FNAME IDFUNC
  {
      cout << "autoexport to " << $2.str << " for the value " << $3.str << "\n" ;
      FTable.SetAutoExportID($3.str, AutoExportID);

      $2.str[$2.len - 1] = 0;
      string path = $2.str + 1;
      AutoExportPaths.push_back(path);
      AutoExportID++;
  }
;

help
  : HELP
  | QUESTION
  ;
%%

